generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(cuid())
  clerkId      String          @unique
  email        String?         @unique
  createdAt    DateTime        @default(now())
  clusters     Cluster[]
  jobs         GenerationJob[]
  subscription Subscription?
  usages       Usage[]

  @@index([clerkId])
}

model Cluster {
  id        String        @id @default(cuid())
  userId    String
  title     String
  niche     String
  status    ClusterStatus @default(DRAFT)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     Post[]

  @@index([userId])
}

/// *
///  * Posts now track:
///  * - type: PILLAR | SUPPORTING
///  * - parentId (relation) and parentSlug (convenience for quick lookups from n8n)
///  * - outline JSON + metadata from the Outline Writer
///  * - outlineStatus + draftStatus (lightweight state flags)
///  *
///  * Backwards compatible with existing `content` + `meta` + `citations` + `captions`.
model Post {
  id              String        @id @default(cuid())
  clusterId       String
  title           String
  slug            String        @unique
  content         String
  status          PostStatus    @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  captions        Json?
  citations       Json?
  meta            Json?
  schema          Json?
  draftStatus     DraftStatus   @default(NONE)
  outline         Json?
  outlineMetadata Json?
  outlineStatus   OutlineStatus @default(NONE)
  parentId        String?
  parentSlug      String?
  type            ArticleType   @default(SUPPORTING)
  cluster         Cluster       @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  parent          Post?         @relation("PostChildren", fields: [parentId], references: [id])
  children        Post[]        @relation("PostChildren")

  @@index([clusterId])
  @@index([type])
  @@index([parentId])
  @@index([parentSlug])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  stripeSubId      String?  @unique
  stripePriceId    String
  status           String
  currentPeriodEnd DateTime
  plan             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@index([stripeCustomerId])
}

model Usage {
  id        String @id @default(cuid())
  userId    String
  metric    String
  periodKey String
  amount    Int    @default(0)
  user      User   @relation(fields: [userId], references: [id])

  @@unique([userId, metric, periodKey])
  @@index([userId, metric, periodKey])
}

model GenerationJob {
  id        String   @id @default(cuid())
  userId    String
  topic     String
  status    String   @default("queued")
  error     String?
  clusterId String?
  requestId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

/// *
///  * A lightweight job keyed by the external jobId you send from n8n.
///  * We keep safe defaults so migrations wonâ€™t fail on existing rows.
model KeywordsJob {
  id          String                    @id
  userId      String
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  clusterId   String?
  completedAt DateTime?
  country     String                    @default("US")
  error       String?
  location    String                    @default("GLOBAL")
  region      String                    @default("ALL")
  requestId   String?                   @unique
  startedAt   DateTime?
  topic       String                    @default("unspecified")
  status      ResearchStatus            @default(QUEUED)
  uiPayload   Json?
  suggestions KeywordSuggestion[]
  articles    ResearchArticle[]
  topicPicks  ResearchTopicSuggestion[]

  @@index([userId, createdAt])
  @@index([status, createdAt])
}

/// *
///  * Each suggested keyword + news links.
model KeywordSuggestion {
  id        String      @id @default(cuid())
  jobId     String
  keyword   String
  score     Float?
  sourceUrl String?
  newsUrls  Json
  createdAt DateTime    @default(now())
  newsMeta  Json?
  job       KeywordsJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

/// Normalized articles produced by the research flow (from Jina / fallbacks)
model ResearchArticle {
  id             String      @id
  jobId          String
  url            String
  title          String?
  sourceName     String?
  publishedTime  DateTime?
  rawText        String?
  snippet        String?
  rank           Int?
  wordCount      Int?
  relevanceScore Decimal?
  job            KeywordsJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, url])
  @@index([jobId])
  @@index([publishedTime])
  @@index([sourceName])
}

/// Deduped topic suggestions (top/rising/all) produced by the flow
model ResearchTopicSuggestion {
  id    String      @id @default(cuid())
  jobId String
  label String
  tier  String
  job   KeywordsJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([label])
}

enum ClusterStatus {
  DRAFT
  QUEUED
  READY
  PUBLISHED
}

enum PostStatus {
  DRAFT
  READY
  PUBLISHED
}

enum ResearchStatus {
  QUEUED
  RUNNING
  READY
  FAILED
}

/// ===== NEW enums for outline/draft tracking & type =====
enum ArticleType {
  PILLAR
  SUPPORTING
}

enum OutlineStatus {
  NONE
  READY
  FAILED
}

enum DraftStatus {
  NONE
  READY
  FAILED
}
